use super::{mbc::MbcController, ppu::{PPU, PpuRegisters}};

pub struct Bus {
    pub rom: Option<Box<dyn MbcController>>,    // 0x0000 - 0x7FFF
    pub ppu: PPU,                                   // 0x8000 - 0x9FFF
    eram: [u8; 0x2000],                         // 0xA000 - 0xBFFF
    wram: [u8; 0x2000],                         // 0xC000 - 0xDFFF (0xE000 - 0xFDFF)
    hram: [u8; 0x200],                          // 0xFE00 - 0xFFFF
    boot_rom: [u8; 0x100],
    pub enable_boot_rom: bool,
}

impl Bus {
    pub fn new() -> Self {
        Bus {
            rom: None,
            ppu: PPU::new(),
            eram: [0x00; 0x2000],
            wram: [0x00; 0x2000],
            hram: [0x00; 0x200],
            boot_rom: [
                0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
                0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
                0x47, 0x21, 0x04, 0x01, 0xE5, 0x11, 0xCB, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0x6B, 0x23, 0x7D, 0xFE,
                0x34, 0x20, 0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0x5A, 0xD1, 0x21,
                0x10, 0x80, 0x1A, 0xCD, 0xA9, 0x00, 0xCD, 0xAA, 0x00, 0x13, 0x7B, 0xFE, 0x34, 0x20, 0xF3, 0x3E,
                0x18, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x32, 0x3D, 0x28, 0x09, 0x0D, 0x20, 0xF9, 0x11, 0xEC, 0xFF,
                0x19, 0x18, 0xF1, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04, 0x1E, 0x02,
                0xCD, 0xBC, 0x00, 0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE,
                0x64, 0x20, 0x06, 0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20,
                0xDD, 0x05, 0x20, 0x69, 0x16, 0x20, 0x18, 0xD6, 0x3E, 0x91, 0xE0, 0x40, 0x1E, 0x14, 0xCD, 0xBC,
                0x00, 0xF0, 0x47, 0xEE, 0xFF, 0xE0, 0x47, 0x18, 0xF3, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17,
                0xC1, 0xCB, 0x11, 0x17, 0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0x0E, 0x0C, 0xF0, 0x44,
                0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC,
                0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88,
                0x89, 0x00, 0x0E, 0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E,
                0x0E, 0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0xFF, 0xFF, 0x3C, 0xE0, 0x50,
            ],
            enable_boot_rom: true,
            // boot_rom: [
            //     0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
            //     0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
            //     0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
            //     0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
            //     0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
            //     0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
            //     0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
            //     0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
            //     0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
            //     0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
            //     0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
            //     0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
            //     0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
            //     0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
            //     0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
            //     0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50,
            // ]
        }
    }

    pub fn read(&self, dir: usize) -> u8 {
        match dir {
            0x0000 ..= 0x7FFF => {
                if self.read(0xFF50) == 0 && dir < 0x100 && self.enable_boot_rom {
                    //println!("{:02X}", self.boot_rom[dir]);
                    self.boot_rom[dir]
                } else {
                    self.rom.as_ref().unwrap().read(dir)
                }
                //self.rom.as_ref().unwrap().read(dir)
            },
            0x8000 ..= 0x9FFF => self.ppu.read(dir),
            0xA000 ..= 0xBFFF => self.eram[dir - 0xA000],
            0xC000 ..= 0xDFFF => self.wram[dir - 0xC000],
            0xE000 ..= 0xFDFF => {
                if dir >= 0xFEA0 && dir <= 0xFEFF {
                    return 0x00;
                };
                self.wram[dir - 0xE000]
            },
            0xFE00 ..= 0xFFFF => self.hram[dir - 0xFE00],
            _ => panic!("Direccion inválida.")
        }
    }

    pub fn write(&mut self, dir: usize, val: u8) {
        match dir {
            0x0000 ..= 0x7FFF => self.rom.as_mut().unwrap().write(dir, val),
            0x8000 ..= 0x9FFF => self.ppu.write(dir, val),
            0xA000 ..= 0xBFFF => self.eram[dir - 0xA000] = val,
            0xC000 ..= 0xDFFF => self.wram[dir - 0xC000] = val,
            0xE000 ..= 0xFDFF => self.wram[dir - 0xE000] = val,
            0xFE00 ..= 0xFFFF => {
                if dir >= 0xFEA0 && dir <= 0xFEFF {
                    return;
                } 
                else if dir == 0xFF04 {
                    self.hram[dir - 0xFE00] = 0;
                    return;
                }
                self.hram[dir - 0xFE00] = val
            },
            _ => panic!("Direccion inválida.")
        }
    }

    pub fn set_enable_boot_rom(mut self, enable_boot_rom: bool) -> Bus {
        self.enable_boot_rom = enable_boot_rom;
        self
    }

    pub fn reset(&mut self) {
        self.write(0xFF06, 0x00);
        self.write(0xFF07, 0x00);
        self.write(0xFF10, 0x80);
        self.write(0xFF05, 0x00);
        self.write(0xFF11, 0xBF);
        self.write(0xFF12, 0xF3);
        self.write(0xFF14, 0xBF);
        self.write(0xFF16, 0x3F);
        self.write(0xFF17, 0x00);
        self.write(0xFF19, 0xBF);
        self.write(0xFF1A, 0x7F);
        self.write(0xFF1B, 0xFF);
        self.write(0xFF1C, 0x9F);
        self.write(0xFF1E, 0xBF);
        self.write(0xFF20, 0xFF);
        self.write(0xFF21, 0x00);
        self.write(0xFF22, 0x00);
        self.write(0xFF23, 0xBF);
        self.write(0xFF24, 0x77);
        self.write(0xFF25, 0xF3);
        self.write(0xFF26, 0xF1);
        self.write(0xFF40, 0x91);
        self.write(0xFF42, 0x00);
        self.write(0xFF43, 0x00);
        self.write(0xFF45, 0x00);
        self.write(0xFF47, 0xFC);
        self.write(0xFF48, 0xFF);
        self.write(0xFF49, 0xFF);
        self.write(0xFF4A, 0x00);
        self.write(0xFF4B, 0x00);
        self.write(0xFFFF, 0x00);
    }

    pub fn increase_div(&mut self) {
        let val = self.read(0xFF04).wrapping_add(1);
        self.write(0xFF04, val);
    }

    pub fn increase_tima(&mut self) -> bool {
        let val = self.read(0xFF05).overflowing_add(1);
        self.write(0xFF05, val.0);
        val.1
    }

    pub fn cycle(&mut self, cycles: u8) {
        // Actualizar los registros de la PPU
        self.ppu.regs = PpuRegisters {
            lcdc: self.read(0xFF40),
            stat: self.read(0xFF41),
            scy: self.read(0xFF42),
            scx: self.read(0xFF43),
            ly: self.read(0xFF44),
            lyc: self.read(0xFF45),
            dma: self.read(0xFF46),
            bgp: self.read(0xFF47),
            obp0: self.read(0xFF48),
            obp1: self.read(0xFF49),
            wy: self.read(0xFF4A),
            wx: self.read(0xFF4B),
        };

        self.ppu.cycle(cycles);
    }
}